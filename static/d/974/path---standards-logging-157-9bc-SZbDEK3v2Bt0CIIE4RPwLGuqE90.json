{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/operational-excellence/ceremonies","title":"Ceremonies"}}},{"node":{"frontmatter":{"path":"/operational-excellence/guilds","title":"Guilds"}}},{"node":{"frontmatter":{"path":"/operational-excellence/standups","title":"Stand-ups"}}},{"node":{"frontmatter":{"path":"/operational-excellence","title":"Operational Excellence"}}},{"node":{"frontmatter":{"path":"/agile","title":"Agile"}}},{"node":{"frontmatter":{"path":"/agile/bugs","title":"Bugs"}}},{"node":{"frontmatter":{"path":"/agile/confluence","title":"Confluence"}}},{"node":{"frontmatter":{"path":"/agile/jira","title":"Jira"}}},{"node":{"frontmatter":{"path":"/conventions","title":"Conventions Used"}}},{"node":{"frontmatter":{"path":"/people","title":"People"}}},{"node":{"frontmatter":{"path":"/principles","title":"Principles"}}},{"node":{"frontmatter":{"path":"/software-engineering-checklist","title":"Software Engineering Checklist"}}},{"node":{"frontmatter":{"path":"/security/credentials","title":"Credentials"}}},{"node":{"frontmatter":{"path":"/security/secure-code","title":"Secure Code Standards"}}},{"node":{"frontmatter":{"path":"/security","title":"Security"}}},{"node":{"frontmatter":{"path":"/security/security-training","title":"Security training"}}},{"node":{"frontmatter":{"path":"/security/software-composition","title":"Software Composition Analysis"}}},{"node":{"frontmatter":{"path":"/security/static-code","title":"Static Code Analysis"}}},{"node":{"frontmatter":{"path":"/testing/characteristics","title":"Characteristics of a Good Unit Test"}}},{"node":{"frontmatter":{"path":"/testing/test-data","title":"Test Data"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-checklist","title":"Test-Driven Development Checklist"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-development","title":"Test-Driven Development"}}},{"node":{"frontmatter":{"path":"/testing","title":"Testing"}}},{"node":{"frontmatter":{"path":"/standards/api-standards","title":"API Standards"}}},{"node":{"frontmatter":{"path":"/standards/ci-cd","title":"CI/CD"}}},{"node":{"frontmatter":{"path":"/standards/cloud","title":"Cloud"}}},{"node":{"frontmatter":{"path":"/standards/code-review","title":"Code Review/Pull Requests"}}},{"node":{"frontmatter":{"path":"/standards/code-style","title":"Code Style"}}},{"node":{"frontmatter":{"path":"/standards/definitions","title":"Definitions of Done"}}},{"node":{"frontmatter":{"path":"/standards/design-principles","title":"Design Principles"}}},{"node":{"frontmatter":{"path":"/standards/logging","title":"Logging"}}},{"node":{"frontmatter":{"path":"/standards/ready","title":"Definitions of Ready"}}},{"node":{"frontmatter":{"path":"/standards/readme","title":"README"}}},{"node":{"frontmatter":{"path":"/standards","title":"Standards"}}},{"node":{"frontmatter":{"path":"/standards/design-review","title":"Technical Design Review"}}},{"node":{"frontmatter":{"path":"/standards/version-control","title":"Version Control"}}},{"node":{"frontmatter":{"path":"/standards/versioning","title":"Versioning"}}}]},"markdownRemark":{"html":"<h1>Logging</h1>\n<table>\n<thead>\n<tr>\n<th>REACH</th>\n<th>ALL</th>\n<th>BY DIVISION</th>\n<th>BY STACK</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LEADS</td>\n<td>Mng Application Performance</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Logs play an important role in development, allowing Developers and\nDevOps to diagnose problems in an application before and after a\nrelease; it allows Cyber to inspect and analyse behaviour and help build\nmetrics to ascertain platform health. A strong logging strategy should\nbe considered pivotal to the success of your application.</p>\n<p><strong>Note: No PI data should every be stored in logs</strong></p>\n<h3>Logging Traffic Lights</h3>\n<p>Aside from standard diagnosing application issues, logging hooks should\nbe written into your application from which to build monitoring and\nalerting. Logging events should be based upon a traffic light principle.</p>\n<ul>\n<li>\n<p>Red (fatal &#x26; error): fatal or unexpected values in the application.</p>\n<blockquote>\n<p>Example: the application encounters an error which is preventing a\nparticular request from completing</p>\n</blockquote>\n</li>\n<li>\n<p>Amber (warn): exceptions or unusual behaviour that may forebode</p>\n<blockquote>\n<p>future failure. Example: object detects inconsistency within an\nexternal data feed and it performs a corrective action to\ncompensate for it.</p>\n</blockquote>\n</li>\n<li>\n<p>Green (info &#x26; trace): log key events in the system or user journey</p>\n<blockquote>\n<p>to demonstrate application health. Example: registration, booking\nand confirmation in a booking flow</p>\n</blockquote>\n</li>\n</ul>\n<h3>Logging Standard</h3>\n<p>We recommend you use the following logging standard in a key/value pair\nthat is easily searchable in Splunk.</p>\n<ul>\n<li>\n<p>Timestamp: Date and time in UTC ISO8601 e.g. 20180915T155300</p>\n</li>\n<li>\n<p>Correlation id: e.g. session id</p>\n</li>\n<li>\n<p>Action: e.g. \"GET /libs/granite/csrf/token.json HTTP/1.1\"</p>\n</li>\n<li>\n<p>Status: in http error format e.g. 200</p>\n</li>\n<li>\n<p>Reason: human readable reason</p>\n</li>\n<li>\n<p>Level: e.g. INFO</p>\n</li>\n<li>\n<p>Message: The stack trace</p>\n</li>\n</ul>\n<h4>Logging Levels</h4>\n<ul>\n<li>\n<p><strong>FATAL:</strong> Events that indicate problems requiring immediate</p>\n<blockquote>\n<p>attention. There may be different criticality of errors. The\nassumption at this point is that the alarming built in to Splunk\nwill be configured to reflect.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>ERROR:</strong> Unhandled events that provide forewarning of potential</p>\n<blockquote>\n<p>problems. This level should be used to log unhandled exceptions\nwhich are caught by a catch block at the boundary of the\napplication which catches all occurring exceptions that have not\nbeen handled by other exception handlers.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>WARN:</strong> Handled events that provide forewarning of potential</p>\n<blockquote>\n<p>problems; although not a response to an actual error, a warning\nindicates that a component or application is not in an ideal state\nand that some further actions could result in a critical error.\nThis level should be used for handled exceptions. For example the\napplication requires a configuration setting but has a default in\ncase the setting is missing.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>INFO:</strong> All events which are required for audit purposes</p>\n</li>\n<li>\n<p><strong>DEBUG:</strong> Events that perform \"normal operations\", e.g. mail</p>\n<blockquote>\n<p>sent, user updated profile etc.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>TRACE:</strong> All other events:</p>\n<ul>\n<li>\n<p>Executed queries, user authentication, session expired messages</p>\n</li>\n<li>\n<p>Begin method X, end method X etc.</p>\n</li>\n<li>\n<p>Any event that could help with debugging</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>Note: To meet audit requirements the default setting should be level\nINFO.</p>","frontmatter":{"title":"Logging","path":"/standards/logging"}},"allNavYaml":{"edges":[{"node":{"title":"Purpose","id":"purpose","items":null}},{"node":{"title":"Conventions Used","id":"conventions","items":null}},{"node":{"title":"Agile","id":"agile","items":[{"id":"bugs","title":"Bugs"},{"id":"confluence","title":"Confluence"},{"id":"jira","title":"Jira"}]}},{"node":{"title":"Principles","id":"principles","items":null}},{"node":{"title":"Standards","id":"standards","items":[{"id":"definitions","title":"Definitions of Done"},{"id":"ready","title":"Definitions of Ready"},{"id":"version-control","title":"Version Control"},{"id":"code-review","title":"Code Review/Pull Requests"},{"id":"design-review","title":"Technical Design Review"},{"id":"code-style","title":"Code Style"},{"id":"design-principles","title":"Design Principles"},{"id":"cloud","title":"Cloud"},{"id":"ci-cd","title":"CI/CD"},{"id":"versioning","title":"Versioning"},{"id":"api-standards","title":"API Standards"},{"id":"logging","title":"Logging"},{"id":"readme","title":"README"}]}},{"node":{"title":"Design Implementations","id":"design-implementations","items":[{"id":"application-info","title":"Application Info"}]}},{"node":{"title":"Security","id":"security","items":[{"id":"secure-code","title":"Secure Code Standards"},{"id":"static-code","title":"Static Code Analysis"},{"id":"software-composition","title":"Software Composition Analysis"},{"id":"credentials","title":"Credentials"},{"id":"security-training","title":"Security training"}]}},{"node":{"title":"Testing","id":"testing","items":[{"id":"test-driven-development","title":"Test-Driven Development"},{"id":"characteristics","title":"Characteristics of a Good Unit Test"},{"id":"test-driven-checklist","title":"Test-Driven Development Checklist"},{"id":"test-data","title":"Test Data"}]}},{"node":{"title":"Operational Excellence","id":"operational-excellence","items":[{"id":"ceremonies","title":"Ceremonies"},{"id":"standups","title":"Stand-ups"},{"id":"guilds","title":"Guilds"}]}},{"node":{"title":"People","id":"people","items":null}},{"node":{"title":"Software Engineering Checklist","id":"software-engineering-checklist","items":null}}]}},"pageContext":{"section":"playbook"}}