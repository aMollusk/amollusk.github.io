{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/software-engineering-checklist","title":"Software Engineering Checklist"}}},{"node":{"frontmatter":{"path":"/testing/characteristics","title":"Characteristics of a Good Unit Test"}}},{"node":{"frontmatter":{"path":"/testing/test-data","title":"Test Data"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-checklist","title":"Test-Driven Development Checklist"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-development","title":"Test-Driven Development"}}},{"node":{"frontmatter":{"path":"/testing","title":"Testing"}}},{"node":{"frontmatter":{"path":"/standards/api-standards","title":"API Standards"}}},{"node":{"frontmatter":{"path":"/standards/ci-cd","title":"CI/CD"}}},{"node":{"frontmatter":{"path":"/standards/cloud","title":"Cloud"}}},{"node":{"frontmatter":{"path":"/standards/code-review","title":"Code Review/Pull Requests"}}},{"node":{"frontmatter":{"path":"/standards/code-style","title":"Code Style"}}},{"node":{"frontmatter":{"path":"/standards/definitions","title":"Definitions of Done"}}},{"node":{"frontmatter":{"path":"/standards/design-principles","title":"Design Principles"}}},{"node":{"frontmatter":{"path":"/standards/logging","title":"Logging"}}},{"node":{"frontmatter":{"path":"/standards/ready","title":"Definitions of Ready"}}},{"node":{"frontmatter":{"path":"/standards/readme","title":"README"}}},{"node":{"frontmatter":{"path":"/standards","title":"Standards"}}},{"node":{"frontmatter":{"path":"/standards/design-review","title":"Technical Design Review"}}},{"node":{"frontmatter":{"path":"/standards/version-control","title":"Version Control"}}},{"node":{"frontmatter":{"path":"/standards/versioning","title":"Versioning"}}}]},"markdownRemark":{"html":"<h1>API Standards</h1>\n<table>\n<thead>\n<tr>\n<th>REACH</th>\n<th>ALL</th>\n<th>BY DIVISION</th>\n<th>BY STACK</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LEADS</td>\n<td>Domain Owner API Integration</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>An API is not the implementation of a web service. It is the\nspecification of the interface to the webservice; where it is and how it\nworks. An API should be reusable by other services. A well-designed web\nAPI should aim to support:</p>\n<ul>\n<li>\n<p><strong>Platform independence</strong>. APIs should be reusable, any client</p>\n<blockquote>\n<p>should be able to call the API, regardless of how the API is\nimplemented internally. An API should follow the standard\nprotocols and ideally shared through the Qantas API Gateway.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Service evolution</strong>. An API should be able to evolve and add</p>\n<blockquote>\n<p>functionality independently from client applications. As the API\nevolves, existing client applications should continue to function\nwithout modification (breaking changes should only occur in\nextreme cases). All functionality should be discoverable, so that\nclient applications can fully utilise it.</p>\n</blockquote>\n</li>\n</ul>\n<h3>Resource Naming</h3>\n<ul>\n<li>\n<p>Use nouns over verbs in resource names</p>\n</li>\n<li>\n<p>Use plural nouns in all cases. Example: /customers instead of</p>\n<blockquote>\n<p>/customer</p>\n</blockquote>\n</li>\n<li>\n<p>Differentiate between the collection resource and the singular</p>\n<blockquote>\n<p>resource. Example: /customers is the collection, /customers/1234\nis a single entity</p>\n</blockquote>\n</li>\n<li>\n<p>Everything is a resource, rethink interactions in terms of resources</p>\n<blockquote>\n<p>not operations</p>\n</blockquote>\n</li>\n<li>\n<p>Use correct http verbs (POST, PUT, PATCH, DELETE, HEAD, OPTIONS)</p>\n</li>\n</ul>\n<h3>Collection Resources</h3>\n<p>Collections should support some standard operations:</p>\n<ul>\n<li>\n<p>Paging<strong>:</strong> Standard query parameter page, used as necessary</p>\n<blockquote>\n<p>depending on the paging strategy (page based, offset based or\ncursor based. Example: /customers?\npage[offset]=100&#x26;page[size]=10</p>\n</blockquote>\n</li>\n<li>\n<p>Sorting<strong>:</strong> Standard query parameter sort with comma-delimited list</p>\n<blockquote>\n<p>of fields to sort on, with + and - for order. Example:\n/customers?sort=+age,+name</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Filtering:</strong> Standard query parameter filter, used as necessary</p>\n<blockquote>\n<p>for filtering fields, with a variety of strategies (equality,\nrange checks etc). Example:\n/customers?filter[age:gt]=30&#x26;filter[postcode:eq]=2000</p>\n</blockquote>\n</li>\n<li>\n<p>Collections should return commonly useful data for each found</p>\n<blockquote>\n<p>resource</p>\n</blockquote>\n</li>\n</ul>\n<h3>Singular Resources</h3>\n<p>Singular resources should support some standard operations:</p>\n<ul>\n<li>\n<p><strong>Sparse fields:</strong> Standard query parameter fields is a</p>\n<blockquote>\n<p>comma-delimited list of fields to return rather than the whole\nresource Example: /customers/1234?fields=name,dob</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Expanding:</strong> Standard query parameter include lists subresources</p>\n<blockquote>\n<p>that should be embedded in the main resource. Example:\n/customers/1234?include=accounts,owner</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Secondary identifiers:</strong> Allow users to provide non-primary</p>\n<blockquote>\n<p>identifiers to simplify lookups. Example: /customers/safi:abcdefg</p>\n</blockquote>\n</li>\n</ul>\n<h3>Resource Paths</h3>\n<ul>\n<li>\n<p>/customers for a collection of entities</p>\n</li>\n<li>\n<p>/customers/[id] for single entity</p>\n</li>\n<li>\n<p>/customers/[id]/bookings for a collection of entities belongs to a</p>\n<blockquote>\n<p>given entity</p>\n</blockquote>\n</li>\n</ul>\n<h3>Response Codes</h3>\n<p>Use HTTP responses correctly in all cases based on the below spec:</p>\n<p>[<a href=\"https://tools.ietf.org/html/rfc7231#section-6\">https://tools.ietf.org/html/rfc7231#section-6</a></p>\n<ul>\n<li>\n<p><strong>200</strong> for successful, synchronous operations (usually GET, PUT,</p>\n<blockquote>\n<p>PATCH or DELETE)</p>\n</blockquote>\n</li>\n<li>\n<p><strong>201</strong> for successful, synchronous operations that result in a new</p>\n<blockquote>\n<p>resource (usually POST)</p>\n</blockquote>\n</li>\n<li>\n<p><strong>202</strong> for successful, asynchronous operations, returning a</p>\n<blockquote>\n<p>resource that be polled for status (usually POST)</p>\n</blockquote>\n</li>\n<li>\n<p><strong>401</strong> for unauthenticated</p>\n</li>\n<li>\n<p><strong>403</strong> for unauthorized</p>\n</li>\n<li>\n<p>412 for invalid request</p>\n</li>\n<li>\n<p><strong>400</strong> for bad data in the request</p>\n</li>\n<li>\n<p><strong>404</strong> for resources that do not exist</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418\"><strong>[418]{.underline}</strong></a></p>\n<blockquote>\n<p>for I'm a teapot</p>\n</blockquote>\n</li>\n<li>\n<p><strong>500</strong> for service unavailability</p>\n</li>\n</ul>\n<h3>Documentation</h3>\n<p>Use [<a href=\"https://swagger.io/\">Swagger 2.0</a> for documenting\nAPI.</p>","frontmatter":{"title":"API Standards","path":"/standards/api-standards"}},"allNavYaml":{"edges":[{"node":{"title":"Purpose","id":"purpose","items":null}},{"node":{"title":"Conventions Used","id":"conventions","items":null}},{"node":{"title":"Agile","id":"agile","items":[{"id":"bugs","title":"Bugs"},{"id":"confluence","title":"Confluence"},{"id":"jira","title":"Jira"}]}},{"node":{"title":"Principles","id":"principles","items":null}},{"node":{"title":"Standards","id":"standards","items":[{"id":"definitions","title":"Definitions of Done"},{"id":"ready","title":"Definitions of Ready"},{"id":"version-control","title":"Version Control"},{"id":"code-review","title":"Code Review/Pull Requests"},{"id":"design-review","title":"Technical Design Review"},{"id":"code-style","title":"Code Style"},{"id":"design-principles","title":"Design Principles"},{"id":"cloud","title":"Cloud"},{"id":"ci-cd","title":"CI/CD"},{"id":"versioning","title":"Versioning"},{"id":"api-standards","title":"API Standards"},{"id":"logging","title":"Logging"},{"id":"readme","title":"README"}]}},{"node":{"title":"Design Implementations","id":"design-implementations","items":[{"id":"application-info","title":"Application Info"}]}},{"node":{"title":"Security","id":"security","items":[{"id":"secure-code","title":"Secure Code Standards"},{"id":"static-code","title":"Static Code Analysis"},{"id":"software-composition","title":"Software Composition Analysis"},{"id":"credentials","title":"Credentials"},{"id":"security-training","title":"Security training"}]}},{"node":{"title":"Testing","id":"testing","items":[{"id":"test-driven-development","title":"Test-Driven Development"},{"id":"characteristics","title":"Characteristics of a Good Unit Test"},{"id":"test-driven-checklist","title":"Test-Driven Development Checklist"},{"id":"test-data","title":"Test Data"}]}},{"node":{"title":"Operational Excellence","id":"operational-excellence","items":[{"id":"ceremonies","title":"Ceremonies"},{"id":"standups","title":"Stand-ups"},{"id":"guilds","title":"Guilds"}]}},{"node":{"title":"People","id":"people","items":null}},{"node":{"title":"Software Engineering Checklist","id":"software-engineering-checklist","items":null}}]}},"pageContext":{"section":"playbook"}}