{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/conventions","title":"Conventions Used"}}},{"node":{"frontmatter":{"path":"/operational-exellence","title":"Operational Excellence"}}},{"node":{"frontmatter":{"path":"/operational-exellence/ceremonies","title":"Ceremonies"}}},{"node":{"frontmatter":{"path":"/operational-exellence/standups","title":"Stand-ups"}}},{"node":{"frontmatter":{"path":"/operational-exellence/guilds","title":"Guilds"}}},{"node":{"frontmatter":{"path":"/agile/bugs","title":"Bugs"}}},{"node":{"frontmatter":{"path":"/agile/jira","title":"Jira"}}},{"node":{"frontmatter":{"path":"/agile","title":"Agile"}}},{"node":{"frontmatter":{"path":"/agile/confluence","title":"Confluence"}}},{"node":{"frontmatter":{"path":"/principles","title":"Principles"}}},{"node":{"frontmatter":{"path":"/people","title":"People"}}},{"node":{"frontmatter":{"path":"/software-eng-checklist","title":"Software Engineering Checklist"}}},{"node":{"frontmatter":{"path":"/security/credentials","title":"Credentials"}}},{"node":{"frontmatter":{"path":"/security/secure-code","title":"Secure Code Standards"}}},{"node":{"frontmatter":{"path":"/security/security-training","title":"Security training"}}},{"node":{"frontmatter":{"path":"/security/software-composition","title":"Software Composition Analysis"}}},{"node":{"frontmatter":{"path":"/security/static-code","title":"Static Code Analysis"}}},{"node":{"frontmatter":{"path":"/security","title":"Security"}}},{"node":{"frontmatter":{"path":"/testing/characteristics","title":"Characteristics of a Good Unit Test"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-checklist","title":"Test-Driven Development Checklist"}}},{"node":{"frontmatter":{"path":"/testing/test-data","title":"Test Data"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-development","title":"Test-Driven Development"}}},{"node":{"frontmatter":{"path":"/testing","title":"Testing"}}},{"node":{"frontmatter":{"path":"/standards/api-standards","title":"API Standards"}}},{"node":{"frontmatter":{"path":"/standards/ci-cd","title":"CI/CD"}}},{"node":{"frontmatter":{"path":"/standards/cloud","title":"Cloud"}}},{"node":{"frontmatter":{"path":"/standards/code-review","title":"Code Review/Pull Requests"}}},{"node":{"frontmatter":{"path":"/standards/code-style","title":"Code Style"}}},{"node":{"frontmatter":{"path":"/standards/definitions","title":"Definitions of Done"}}},{"node":{"frontmatter":{"path":"/standards/design-principles","title":"Design Principles"}}},{"node":{"frontmatter":{"path":"/standards/logging","title":"Logging"}}},{"node":{"frontmatter":{"path":"/standards/readme","title":"README"}}},{"node":{"frontmatter":{"path":"/standards/ready","title":"Definitions of Ready"}}},{"node":{"frontmatter":{"path":"/standards","title":"Standards"}}},{"node":{"frontmatter":{"path":"/standards/design-review","title":"Technical Design Review"}}},{"node":{"frontmatter":{"path":"/standards/version-control","title":"Version Control"}}},{"node":{"frontmatter":{"path":"/standards/versioning","title":"Versioning"}}}]},"markdownRemark":{"html":"<h1>Test-Driven Development</h1>\n<p>All code must have unit test coverage that covers all functionality of\nthe application. For legacy systems predating TDD we expect\nbest-efforts, all new code must have unit tests.</p>\n<p>The benefits of Test-Driven Development include:</p>\n<ul>\n<li>\n<p>Constant feedback that each component is still working.</p>\n</li>\n<li>\n<p>The unit tests act as documentation that cannot go out-of-date,</p>\n<blockquote>\n<p>unlike separate documentation, which can and frequently does.</p>\n</blockquote>\n</li>\n<li>\n<p>When the test passes and the production code is refactored to remove</p>\n<blockquote>\n<p>duplication, it is clear that the code is finished, and the\ndeveloper can move on to a new test.</p>\n</blockquote>\n</li>\n<li>\n<p>Test-driven development forces critical analysis and design because</p>\n<blockquote>\n<p>the developer cannot create the production code without truly\nunderstanding what the desired result should be and how to test\nit.</p>\n</blockquote>\n</li>\n<li>\n<p>The software tends to be better designed, that is, loosely coupled</p>\n<blockquote>\n<p>and easily maintainable, because the developer is free to make\ndesign decisions and refactor at any time with confidence that the\nsoftware is still working. This confidence is gained by running\nthe tests. The need for a design pattern may emerge, and the code\ncan be changed at that time.</p>\n</blockquote>\n</li>\n<li>\n<p>The test suite acts as a regression safety net on bugs: If a bug is</p>\n<blockquote>\n<p>found, the developer should create a test to reveal the bug and\nthen modify the production code so that the bug goes away and all\nother tests still pass. On each successive test run, all previous\nbug fixes are verified.</p>\n</blockquote>\n</li>\n<li>\n<p>Reduced debugging time!</p>\n</li>\n</ul>","frontmatter":{"title":"Test-Driven Development","path":"/testing/test-driven-development"}}},"pageContext":{"section":"playbook"}}