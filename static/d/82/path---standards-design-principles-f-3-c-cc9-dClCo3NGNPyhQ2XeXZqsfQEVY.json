{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/testing/characteristics","title":"Characteristics of a Good Unit Test"}}},{"node":{"frontmatter":{"path":"/testing/test-data","title":"Test Data"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-checklist","title":"Test-Driven Development Checklist"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-development","title":"Test-Driven Development"}}},{"node":{"frontmatter":{"path":"/testing","title":"Testing"}}},{"node":{"frontmatter":{"path":"/standards/ready","title":"Definitions of Ready"}}},{"node":{"frontmatter":{"path":"/standards","title":"Standards"}}},{"node":{"frontmatter":{"path":"/standards/design-review","title":"Technical Design Review"}}},{"node":{"frontmatter":{"path":"/standards/version-control","title":"Version Control"}}},{"node":{"frontmatter":{"path":"/standards/versioning","title":"Versioning"}}}]},"markdownRemark":{"html":"<h1>Design Principles</h1>\n<p>Follow the <a href=\"https://en.wikipedia.org/wiki/SOLID\">SOLID</a>\nprinciples, where possible:</p>\n<ul>\n<li>\n<p>Single Responsibility Principle</p>\n</li>\n<li>\n<p>Open/Closed Principle</p>\n</li>\n<li>\n<p>Liskov Substitution Principle</p>\n</li>\n<li>\n<p>Interface Segregation Principle</p>\n</li>\n<li>\n<p>Dependency Inversion</p>\n</li>\n</ul>\n<p>We also advocate the advice of <a href=\"https://www.oreilly.com/library/view/clean-code/9780136083238/\">Clean\nCode</a></p>\n<ol>\n<li>\n<p>Bad code does too much -- Clean code is focused</p>\n</li>\n<li>\n<p>The language you wrote your code with should look like it was made</p>\n<blockquote>\n<p>for the problem. It is not the language that makes a program look\nsimple, but the programmer who makes the language appear simple.</p>\n</blockquote>\n</li>\n<li>\n<p>It should not be redundant. Comply with DRY principles, although</p>\n<blockquote>\n<p>don't become zealous on your implementation of this.</p>\n</blockquote>\n</li>\n<li>\n<p>Reading your code should be pleasant</p>\n</li>\n<li>\n<p>Can be easily extended by any other developer. Similarly, code</p>\n<blockquote>\n<p>should easily be removed</p>\n</blockquote>\n</li>\n<li>\n<p>It should have minimal dependencies</p>\n</li>\n<li>\n<p>Smaller is better</p>\n</li>\n</ol>","frontmatter":{"title":"Design Principles","path":"/standards/design-principles"}},"allNavYaml":{"edges":[{"node":{"title":"Purpose","id":"purpose","items":null}},{"node":{"title":"Conventions Used","id":"conventions","items":null}},{"node":{"title":"Agile","id":"agile","items":[{"id":"bugs","title":"Bugs"},{"id":"confluence","title":"Confluence"},{"id":"jira","title":"Jira"}]}},{"node":{"title":"Principles","id":"principles","items":null}},{"node":{"title":"Standards","id":"standards","items":[{"id":"definitions","title":"Definitions of Done"},{"id":"ready","title":"Definitions of Ready"},{"id":"version-control","title":"Version Control"},{"id":"code-review","title":"Code Review/Pull Requests"},{"id":"design-review","title":"Technical Design Review"},{"id":"code-style","title":"Code Style"},{"id":"design-principles","title":"Design Principles"},{"id":"cloud","title":"Cloud"},{"id":"ci-cd","title":"CI/CD"},{"id":"versioning","title":"Versioning"},{"id":"api-standards","title":"API Standards"},{"id":"logging","title":"Logging"},{"id":"readme","title":"README"}]}},{"node":{"title":"Design Implementations","id":"design-implementations","items":[{"id":"application-info","title":"Application Info"}]}},{"node":{"title":"Security","id":"security","items":[{"id":"secure-code","title":"Secure Code Standards"},{"id":"static-code","title":"Static Code Analysis"},{"id":"software-composition","title":"Software Composition Analysis"},{"id":"credentials","title":"Credentials"},{"id":"security-training","title":"Security training"}]}},{"node":{"title":"Testing","id":"testing","items":[{"id":"test-driven-development","title":"Test-Driven Development"},{"id":"characteristics","title":"Characteristics of a Good Unit Test"},{"id":"test-driven-checklist","title":"Test-Driven Development Checklist"},{"id":"test-data","title":"Test Data"}]}},{"node":{"title":"Operational Excellence","id":"operational-excellence","items":[{"id":"ceremonies","title":"Ceremonies"},{"id":"standups","title":"Stand-ups"},{"id":"guilds","title":"Guilds"}]}},{"node":{"title":"People","id":"people","items":null}},{"node":{"title":"Software Engineering Checklist","id":"software-engineering-checklist","items":null}}]}},"pageContext":{"section":"playbook"}}