{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/conventions","title":"Conventions Used"}}},{"node":{"frontmatter":{"path":"/agile","title":"Agile"}}},{"node":{"frontmatter":{"path":"/agile/bugs","title":"Bugs"}}},{"node":{"frontmatter":{"path":"/operational-exellence/ceremonies","title":"Ceremonies"}}},{"node":{"frontmatter":{"path":"/agile/jira","title":"Jira"}}},{"node":{"frontmatter":{"path":"/agile/confluence","title":"Confluence"}}},{"node":{"frontmatter":{"path":"/people","title":"People"}}},{"node":{"frontmatter":{"path":"/operational-exellence/guilds","title":"Guilds"}}},{"node":{"frontmatter":{"path":"/operational-exellence","title":"Operational Excellence"}}},{"node":{"frontmatter":{"path":"/operational-exellence/standups","title":"Stand-ups"}}},{"node":{"frontmatter":{"path":"/software-eng-checklist","title":"Software Engineering Checklist"}}},{"node":{"frontmatter":{"path":"/principles","title":"Principles"}}},{"node":{"frontmatter":{"path":"/security/credentials","title":"Credentials"}}},{"node":{"frontmatter":{"path":"/security/secure-code","title":"Secure Code Standards"}}},{"node":{"frontmatter":{"path":"/security/security-training","title":"Security training"}}},{"node":{"frontmatter":{"path":"/security","title":"Security"}}},{"node":{"frontmatter":{"path":"/security/software-composition","title":"Software Composition Analysis"}}},{"node":{"frontmatter":{"path":"/security/static-code","title":"Static Code Analysis"}}},{"node":{"frontmatter":{"path":"/standards/api-standards","title":"API Standards"}}},{"node":{"frontmatter":{"path":"/standards/cloud","title":"Cloud"}}},{"node":{"frontmatter":{"path":"/standards/code-style","title":"Code Style"}}},{"node":{"frontmatter":{"path":"/standards/code-review","title":"Code Review/Pull Requests"}}},{"node":{"frontmatter":{"path":"/standards/ci-cd","title":"CI/CD"}}},{"node":{"frontmatter":{"path":"/standards/definitions","title":"Definitions of Done"}}},{"node":{"frontmatter":{"path":"/standards/design-principles","title":"Design Principles"}}},{"node":{"frontmatter":{"path":"/standards/logging","title":"Logging"}}},{"node":{"frontmatter":{"path":"/standards","title":"Standards"}}},{"node":{"frontmatter":{"path":"/standards/ready","title":"Definitions of Ready"}}},{"node":{"frontmatter":{"path":"/standards/design-review","title":"Technical Design Review"}}},{"node":{"frontmatter":{"path":"/standards/readme","title":"README"}}},{"node":{"frontmatter":{"path":"/standards/versioning","title":"Versioning"}}},{"node":{"frontmatter":{"path":"/standards/version-control","title":"Version Control"}}},{"node":{"frontmatter":{"path":"/testing/characteristics","title":"Characteristics of a Good Unit Test"}}},{"node":{"frontmatter":{"path":"/testing/test-data","title":"Test Data"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-checklist","title":"Test-Driven Development Checklist"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-development","title":"Test-Driven Development"}}},{"node":{"frontmatter":{"path":"/testing","title":"Testing"}}}]},"markdownRemark":{"html":"<h1>Version Control</h1>\n<table>\n<thead>\n<tr>\n<th>REACH</th>\n<th>ALL</th>\n<th>BY DIVISION</th>\n<th>BY STACK</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LEADS</td>\n<td>Head of Software Engineering</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>We use a distributed version control with open source\n<a href=\"https://git-scm.com/\">Git</a>. Repository management of our\ninternal code is via <a href=\"https://www.atlassian.com/software/bitbucket\">Atlassian\nBitbucket</a> or\n<a href=\"http://github.com/\">GitHub</a>. Repositories are private by\ndefault; any public repositories need to have written permission by the\nChief Officer Commercial at Qantas or the CTO of Qantas. Repos should\nbe hosted in the Qantas account. It is not permissible for teams to\nhave their own source control unless agreed to in writing.</p>\n<p>By default version control setting</p>\n<ul>\n<li>\n<p>MFA enabled for all users</p>\n</li>\n<li>\n<p>Forking is turned off</p>\n</li>\n<li>\n<p>Release branch access is restricted</p>\n</li>\n<li>\n<p>Minimum of two pull requests into release branch</p>\n</li>\n</ul>\n<h3>Branching</h3>\n<h4>Branching Strategy</h4>\n<p>We recommend four branching strategies depending on team and application\nmaturity.</p>\n<ul>\n<li>\n<p><a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow\">Feature Branching</a>:</p>\n<blockquote>\n<p>Default option for new teams and rapidly emerging environments</p>\n</blockquote>\n</li>\n<li>\n<p><a href=\"https://guides.github.com/introduction/flow/\">GitHub Flow</a>:</p>\n<blockquote>\n<p>Rapid development with frequent deployment</p>\n</blockquote>\n</li>\n<li>\n<p><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">Git Flow</a>:</p>\n<blockquote>\n<p>For large teams and monolith applications</p>\n</blockquote>\n</li>\n<li>\n<p><a href=\"https://trunkbaseddevelopment.com/\">Trunk Based</a>:</p>\n<blockquote>\n<p>For advanced teams with high unit test coverage and automation.\nIdeally only use if intended for a continuous delivery environment</p>\n</blockquote>\n</li>\n</ul>\n<h4>Branch Naming</h4>\n<p>The naming of a branch should be in the format:</p>\n<p>[Issue type]/[JIRA issue ID]-short-hyphen-case-description</p>\n<p>Issue Types</p>\n<ul>\n<li>\n<p>release/ for release</p>\n</li>\n<li>\n<p>feature/ for features</p>\n</li>\n<li>\n<p>bugfix/ for bug fixes</p>\n</li>\n<li>\n<p>refactor/ for improvements/refactor</p>\n</li>\n<li>\n<p>improvement/ for random tasks</p>\n</li>\n<li>\n<p>hotfix/ for bug fixes which need to be branched from and merged into</p>\n<blockquote>\n<p>release branch</p>\n</blockquote>\n</li>\n</ul>\n<h3>Commit naming</h3>\n<p>Commit messages should point out objectively what changes were made to\nthe system using preferably bullet points with the goal, reason or\nintent rather than what has been done (the diff will show that).\nMessages should be clear and concise so that other programmers can look\nit up quickly.</p>\n<p>Good practices about commit messages can be found at <a href=\"http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\">tpope's\nblog</a>\nand <a href=\"https://chris.beams.io/posts/git-commit/\">Chris Beam's\nblog</a>.</p>\n<p>All commits on a feature branch should be squashed into a single commit\nthat contains the JIRA ticket number and a meaningful release-notes-like\ncomment in the commit message.</p>\n<h4>Commit Example</h4>\n<p>Commit messages should be in the following format:</p>\n<p>[JIRA issue ID] [Summary of the changes.]</p>\n<p>Summary of the changes should be like the following:</p>\n<p>Did &#x3C;What change did you do?>, so that &#x3C;Why did you do that (The\nreason)></p>\n<p>Remove &#x3C;troublesome gem X>, which was causing &#x3C;specific description\nof issue introduced by gem></p>\n<p>> BAD. Don't do this.<br>\nFixed compiling errors</p>\n<p>> Good.<br>\nQAN-1234 Added kangaroo to Qantas logo to keep it consistent with Qantas\nbrand.</p>\n<h2>Technical Design Review</h2>\n<p>This happens before a technical story is started. The aim is to discuss\nyour solution approach.</p>\n<p>The aim is:</p>\n<ul>\n<li>\n<p>Review 1 page solution outline</p>\n</li>\n<li>\n<p>Review with one Developer and QA</p>\n</li>\n<li>\n<p>Discuss Design Patterns</p>\n</li>\n<li>\n<p>Define Data Contracts</p>\n</li>\n<li>\n<p>Define and verify Acceptance Criteria.</p>\n</li>\n</ul>\n<h2>Code Reviews/Pull Requests</h2>\n<p>All production code needs to be reviewed via a pull request. Code\nreviews are classless: seniority is not required for a peer review\nalthough repository ownership can mandate approver authority.</p>\n<p>The aim of pull requests are to:</p>\n<ul>\n<li>\n<p>Catch major defects before they are introduced into the existing</p>\n<blockquote>\n<p>code base</p>\n</blockquote>\n</li>\n<li>\n<p>Discuss architectural improvements and provide guidance for changes</p>\n</li>\n<li>\n<p>Look for secure coding practices</p>\n</li>\n<li>\n<p>Establish and follow coding standards</p>\n</li>\n<li>\n<p>Give kudos for great work</p>\n</li>\n<li>\n<p>Review Unit Tests</p>\n</li>\n<li>\n<p>Learn from other developers</p>\n</li>\n<li>\n<p>Cross Skill yourself</p>\n</li>\n</ul>\n<h3>Pull Request Social Contract</h3>\n<p>Before each review, the <a href=\"https://www.google.com/url?sa=t&#x26;rct=j&#x26;q=&#x26;esrc=s&#x26;source=web&#x26;cd=3&#x26;cad=rja&#x26;uact=8&#x26;ved=2ahUKEwjk6-yugKjdAhVUdt4KHbVABvsQFjACegQIBRAK&#x26;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSocial_contract&#x26;usg=AOvVaw00zAPlb_lk_T-jSFCMPe8L\">Social\nContract</a>\nshould be considered:</p>\n<ul>\n<li>\n<p>We respect each other at all times</p>\n</li>\n<li>\n<p>We assume good intent</p>\n</li>\n<li>\n<p>Comments are contextual; focused only on the code</p>\n</li>\n<li>\n<p>Every comment should be addressed, never ignored</p>\n</li>\n<li>\n<p>Every peer review is an opportunity of collective learning and</p>\n<blockquote>\n<p>collaboration</p>\n</blockquote>\n</li>\n</ul>\n<h3>Pull Request Preparation</h3>\n<p>Pull Requests should meet the following criteria:</p>\n<ul>\n<li>\n<p>Should have description of changes</p>\n</li>\n<li>\n<p>Pull requests should be as small as possible with limited numbers of</p>\n<blockquote>\n<p>scope changes</p>\n</blockquote>\n</li>\n<li>\n<p>Build must be green and passed tests</p>\n</li>\n<li>\n<p>Reviewers should mark the pull request as \"need work\" even if they</p>\n<blockquote>\n<p>think the proposed changes are minor</p>\n</blockquote>\n</li>\n<li>\n<p>Should have description of changes in pull request</p>\n</li>\n<li>\n<p>Include all who are involved with that project</p>\n</li>\n<li>\n<p>Should squash unmeaningful commit messages before merge into master</p>\n</li>\n<li>\n<p>Include a brief on what the change is about.</p>\n</li>\n<li>\n<p>Should include unit test</p>\n</li>\n</ul>\n<h3>Pull Request Reviewers</h3>\n<p>The guidelines for Pull Request Reviewers are:</p>\n<ul>\n<li>\n<p>Mandatory 2 approvers (should not include members if pair</p>\n<blockquote>\n<p>programmed)</p>\n</blockquote>\n</li>\n<li>\n<p>Ideally 1 reviewer outside your team.</p>\n</li>\n<li>\n<p>Reviewed within two working days</p>\n</li>\n<li>\n<p>Requested refactoring changes should not change behaviour</p>\n</li>\n</ul>","frontmatter":{"title":"Version Control","path":"/standards/version-control"}}},"pageContext":{"section":"playbook"}}