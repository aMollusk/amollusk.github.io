{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/agile","title":"Agile"}}},{"node":{"frontmatter":{"path":"/people","title":"People"}}},{"node":{"frontmatter":{"path":"/agile/confluence","title":"Confluence"}}},{"node":{"frontmatter":{"path":"/agile/jira","title":"Jira"}}},{"node":{"frontmatter":{"path":"/operational-exellence/ceremonies","title":"Ceremonies"}}},{"node":{"frontmatter":{"path":"/operational-exellence/guilds","title":"Guilds"}}},{"node":{"frontmatter":{"path":"/operational-exellence/standups","title":"Stand-ups"}}},{"node":{"frontmatter":{"path":"/operational-exellence","title":"Operational Excellence"}}},{"node":{"frontmatter":{"path":"/security/credentials","title":"Credentials"}}},{"node":{"frontmatter":{"path":"/conventions","title":"Conventions Used"}}},{"node":{"frontmatter":{"path":"/software-eng-checklist","title":"Software Engineering Checklist"}}},{"node":{"frontmatter":{"path":"/security/secure-code","title":"Secure Code Standards"}}},{"node":{"frontmatter":{"path":"/security","title":"Security"}}},{"node":{"frontmatter":{"path":"/security/security-training","title":"Security training"}}},{"node":{"frontmatter":{"path":"/security/software-composition","title":"Software Composition Analysis"}}},{"node":{"frontmatter":{"path":"/security/static-code","title":"Static Code Analysis"}}},{"node":{"frontmatter":{"path":"/principles","title":"Principles"}}},{"node":{"frontmatter":{"path":"/standards/ci-cd","title":"CI/CD"}}},{"node":{"frontmatter":{"path":"/standards/api-standards","title":"API Standards"}}},{"node":{"frontmatter":{"path":"/standards/cloud","title":"Cloud"}}},{"node":{"frontmatter":{"path":"/standards/code-review","title":"Code Review/Pull Requests"}}},{"node":{"frontmatter":{"path":"/standards/code-style","title":"Code Style"}}},{"node":{"frontmatter":{"path":"/standards/definitions","title":"Definitions of Done"}}},{"node":{"frontmatter":{"path":"/standards/design-principles","title":"Design Principles"}}},{"node":{"frontmatter":{"path":"/standards/logging","title":"Logging"}}},{"node":{"frontmatter":{"path":"/standards/readme","title":"README"}}},{"node":{"frontmatter":{"path":"/standards/ready","title":"Definitions of Ready"}}},{"node":{"frontmatter":{"path":"/standards/design-review","title":"Technical Design Review"}}},{"node":{"frontmatter":{"path":"/standards/version-control","title":"Version Control"}}},{"node":{"frontmatter":{"path":"/standards","title":"Standards"}}},{"node":{"frontmatter":{"path":"/standards/versioning","title":"Versioning"}}},{"node":{"frontmatter":{"path":"/testing/characteristics","title":"Characteristics of a Good Unit Test"}}},{"node":{"frontmatter":{"path":"/testing/test-data","title":"Test Data"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-checklist","title":"Test-Driven Development Checklist"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-development","title":"Test-Driven Development"}}},{"node":{"frontmatter":{"path":"/testing","title":"Testing"}}},{"node":{"frontmatter":{"path":"/agile/bugs","title":"Bugs"}}}]},"markdownRemark":{"html":"<h1>Design Principles</h1>\n<p>Follow the <a href=\"https://en.wikipedia.org/wiki/SOLID\">SOLID</a>\nprinciples, where possible:</p>\n<ul>\n<li>\n<p>Single Responsibility Principle</p>\n</li>\n<li>\n<p>Open/Closed Principle</p>\n</li>\n<li>\n<p>Liskov Substitution Principle</p>\n</li>\n<li>\n<p>Interface Segregation Principle</p>\n</li>\n<li>\n<p>Dependency Inversion</p>\n</li>\n</ul>\n<p>We also advocate the advice of <a href=\"https://www.oreilly.com/library/view/clean-code/9780136083238/\">Clean\nCode</a></p>\n<ol>\n<li>\n<p>Bad code does too much -- Clean code is focused</p>\n</li>\n<li>\n<p>The language you wrote your code with should look like it was made</p>\n<blockquote>\n<p>for the problem. It is not the language that makes a program look\nsimple, but the programmer who makes the language appear simple.</p>\n</blockquote>\n</li>\n<li>\n<p>It should not be redundant. Comply with DRY principles, although</p>\n<blockquote>\n<p>don't become zealous on your implementation of this.</p>\n</blockquote>\n</li>\n<li>\n<p>Reading your code should be pleasant</p>\n</li>\n<li>\n<p>Can be easily extended by any other developer. Similarly, code</p>\n<blockquote>\n<p>should easily be removed</p>\n</blockquote>\n</li>\n<li>\n<p>It should have minimal dependencies</p>\n</li>\n<li>\n<p>Smaller is better</p>\n</li>\n</ol>","frontmatter":{"title":"Design Principles","path":"/standards/design-principles"}}},"pageContext":{"section":"playbook"}}