{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"/agile","title":"Agile"}}},{"node":{"frontmatter":{"path":"/agile/bugs","title":"Bugs"}}},{"node":{"frontmatter":{"path":"/people","title":"People"}}},{"node":{"frontmatter":{"path":"/agile/confluence","title":"Confluence"}}},{"node":{"frontmatter":{"path":"/agile/jira","title":"Jira"}}},{"node":{"frontmatter":{"path":"/operational-exellence/ceremonies","title":"Ceremonies"}}},{"node":{"frontmatter":{"path":"/operational-exellence/guilds","title":"Guilds"}}},{"node":{"frontmatter":{"path":"/operational-exellence/standups","title":"Stand-ups"}}},{"node":{"frontmatter":{"path":"/operational-exellence","title":"Operational Excellence"}}},{"node":{"frontmatter":{"path":"/security/credentials","title":"Credentials"}}},{"node":{"frontmatter":{"path":"/conventions","title":"Conventions Used"}}},{"node":{"frontmatter":{"path":"/software-eng-checklist","title":"Software Engineering Checklist"}}},{"node":{"frontmatter":{"path":"/security/secure-code","title":"Secure Code Standards"}}},{"node":{"frontmatter":{"path":"/security","title":"Security"}}},{"node":{"frontmatter":{"path":"/security/security-training","title":"Security training"}}},{"node":{"frontmatter":{"path":"/security/software-composition","title":"Software Composition Analysis"}}},{"node":{"frontmatter":{"path":"/security/static-code","title":"Static Code Analysis"}}},{"node":{"frontmatter":{"path":"/principles","title":"Principles"}}},{"node":{"frontmatter":{"path":"/standards/ci-cd","title":"CI/CD"}}},{"node":{"frontmatter":{"path":"/standards/api-standards","title":"API Standards"}}},{"node":{"frontmatter":{"path":"/standards/cloud","title":"Cloud"}}},{"node":{"frontmatter":{"path":"/standards/code-review","title":"Code Review/Pull Requests"}}},{"node":{"frontmatter":{"path":"/standards/code-style","title":"Code Style"}}},{"node":{"frontmatter":{"path":"/standards/definitions","title":"Definitions of Done"}}},{"node":{"frontmatter":{"path":"/standards/design-principles","title":"Design Principles"}}},{"node":{"frontmatter":{"path":"/standards/logging","title":"Logging"}}},{"node":{"frontmatter":{"path":"/standards/readme","title":"README"}}},{"node":{"frontmatter":{"path":"/standards/ready","title":"Definitions of Ready"}}},{"node":{"frontmatter":{"path":"/standards/design-review","title":"Technical Design Review"}}},{"node":{"frontmatter":{"path":"/standards/version-control","title":"Version Control"}}},{"node":{"frontmatter":{"path":"/standards","title":"Standards"}}},{"node":{"frontmatter":{"path":"/standards/versioning","title":"Versioning"}}},{"node":{"frontmatter":{"path":"/testing/characteristics","title":"Characteristics of a Good Unit Test"}}},{"node":{"frontmatter":{"path":"/testing/test-data","title":"Test Data"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-checklist","title":"Test-Driven Development Checklist"}}},{"node":{"frontmatter":{"path":"/testing/test-driven-development","title":"Test-Driven Development"}}},{"node":{"frontmatter":{"path":"/testing","title":"Testing"}}}]},"markdownRemark":{"html":"<h1>Security</h1>\n<table>\n<thead>\n<tr>\n<th>REACH</th>\n<th>ALL</th>\n<th>BY DIVISION</th>\n<th>BY STACK</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LEADS</td>\n<td>BISO</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Key Rules:</p>\n<ul>\n<li>\n<p>No PI Data in Source Code</p>\n</li>\n<li>\n<p>No credentials in Source Code</p>\n</li>\n<li>\n<p>Pen Test performed, shared and issues addressed for every major</p>\n<blockquote>\n<p>release.</p>\n</blockquote>\n</li>\n<li>\n<p>Password complexity and rotation policy in place and mandated.</p>\n</li>\n<li>\n<p>Secure Code Training completed and certification required to approve</p>\n<blockquote>\n<p>pull requests.</p>\n</blockquote>\n</li>\n<li>\n<p>All builds performed via CI</p>\n</li>\n<li>\n<p>No production access for any developer.</p>\n</li>\n</ul>\n<p>Use the following guidelines to help reduce you attack surface:</p>\n<ul>\n<li>\n<p><strong>Validate input.</strong> Validate input from all untrusted data sources.</p>\n<blockquote>\n<p>Proper input validation can eliminate the vast majority of\nsoftware vulnerabilities. Be suspicious of most external data\nsources, including command line arguments, network interfaces,\nenvironmental variables, and user-controlled files</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Heed compiler warnings.</strong> Compile code using the highest warning</p>\n<blockquote>\n<p>level available for your compiler and eliminate warnings by\nmodifying the code. Use static and dynamic analysis tools to\ndetect and eliminate additional security flaws.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Architect and design for security policies.</strong> Create a software</p>\n<blockquote>\n<p>architecture and design your software to implement and enforce\nsecurity policies. For example, if your system requires different\nprivileges at different times, consider dividing the system into\ndistinct intercommunicating subsystems, each with an appropriate\nprivilege set.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Keep it simple.</strong> Keep the design as simple and small as possible.</p>\n<blockquote>\n<p>Complex designs increase the likelihood that errors will be made\nin their implementation, configuration, and use. Additionally, the\neffort required to achieve an appropriate level of assurance\nincreases dramatically as security mechanisms become more complex.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Default deny.</strong> Base access decisions on permission rather than</p>\n<blockquote>\n<p>exclusion. This means that, by default, access is denied and the\nprotection scheme identifies conditions under which access is\npermitted.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Adhere to the principle of least privilege.</strong> Every process should</p>\n<blockquote>\n<p>execute with the least set of privileges necessary to complete the\njob. Any elevated permission should only be accessed for the least\namount of time required to complete the privileged task. This\napproach reduces the opportunities an attacker has to execute\narbitrary code with elevated privileges.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Sanitize data sent to other systems.</strong> Sanitize all data passed to</p>\n<blockquote>\n<p>complex subsystems such as command shells, relational databases,\nand commercial off-the-shelf (COTS) components. Attackers may be\nable to invoke unused functionality in these components through\nthe use of SQL, command, or other injection attacks. This is not\nnecessarily an input validation problem because the complex\nsubsystem being invoked does not understand the context in which\nthe call is made. Because the calling process understands the\ncontext, it is responsible for sanitizing the data before invoking\nthe subsystem.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Practice</strong> <strong>defense in depth.</strong> Manage risk with multiple</p>\n<blockquote>\n<p>defensive strategies, so that if one layer of defense turns out to\nbe inadequate, another layer of defense can prevent a security\nflaw from becoming an exploitable vulnerability and/or limit the\nconsequences of a successful exploit.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Use effective quality assurance techniques.</strong> Good quality</p>\n<blockquote>\n<p>assurance techniques can be effective in identifying and\neliminating vulnerabilities. Fuzz testing, penetration testing,\nand source code audits should all be incorporated as part of an\neffective quality assurance program. Independent security reviews\ncan lead to more secure systems. External reviewers bring an\nindependent perspective; for example, in identifying and\ncorrecting invalid assumptions.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Adopt a secure coding standard.</strong> Develop and/or apply a secure</p>\n<blockquote>\n<p>coding standard for your target development language and platform.</p>\n</blockquote>\n</li>\n</ul>\n<p>Reference:\n<a href=\"https://wiki.sei.cmu.edu/confluence/display/seccode/Top+10+Secure+Coding+Practices\">https://wiki.sei.cmu.edu/confluence/display/seccode/Top+10+Secure+Coding+Practices</a></p>","frontmatter":{"title":"Security","path":"/security"}}},"pageContext":{"section":"playbook"}}